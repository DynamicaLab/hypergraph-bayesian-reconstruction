
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace undir_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 41> locations_array__ = 
{" (found before start of program)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 6, column 2 to column 28)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 7, column 2 to column 29)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 30, column 2 to column 15)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 32, column 4 to column 16)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 34, column 6 to column 58)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 35, column 6 to column 58)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 37, column 6 to column 49)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 38, column 6 to column 49)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 40, column 6 to column 46)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 41, column 6 to column 46)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 42, column 6 to column 48)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 43, column 6 to column 24)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 33, column 21 to line 44, column 5)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 33, column 4 to line 44, column 5)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 31, column 17 to line 45, column 3)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 31, column 2 to line 45, column 3)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 10, column 2 to column 25)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 11, column 2 to column 27)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 12, column 2 to column 21)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 16, column 6 to column 58)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 17, column 6 to column 58)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 19, column 6 to column 49)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 20, column 6 to column 49)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 22, column 6 to column 46)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 23, column 6 to column 46)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 25, column 12 to column 58)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 25, column 11 to column 59)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 24, column 28 to column 74)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 24, column 27 to column 75)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 24, column 6 to line 25, column 59)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 15, column 23 to line 26, column 5)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 15, column 4 to line 26, column 5)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 14, column 17 to line 27, column 3)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 14, column 2 to line 27, column 3)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 2, column 2 to column 17)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 3, column 17 to column 18)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 3, column 20 to column 21)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 3, column 2 to column 23)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 30, column 9 to column 10)",
 " (in '/home/simon/Documents/Maitrise/articles/hypergraph-bayesian-reconstruction/stan-models/undir.stan', line 30, column 12 to column 13)"};




class undir_model final : public model_base_crtp<undir_model> {

 private:
  int n;
  std::vector<std::vector<int>> X; 
  
 
 public:
  ~undir_model() { }
  
  inline std::string model_name() const final { return "undir_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  undir_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "undir_model_namespace::undir_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      
      current_statement__ = 35;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("X", "n", n);
      current_statement__ = 38;
      context__.validate_dims("data initialization","X","int",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(n)});
      X = 
        std::vector<std::vector<int>>(n, 
          std::vector<int>(n, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> X_flat__;
        current_statement__ = 38;
        X_flat__ = context__.vals_i("X");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "X", X, 0);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Q", "n", n);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("Q", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 2 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "undir_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> rates =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 1;
      rates = in__.template read_constrain_positive_ordered<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(lp__, 2);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 2;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      {
        current_statement__ = 17;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(
            stan::model::rvalue(rates, "rates", stan::model::index_uni(1)),
            1, 1));
        current_statement__ = 18;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(
            stan::model::rvalue(rates, "rates", stan::model::index_uni(2)),
            5, 0.1));
        current_statement__ = 19;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(rho, 1.1, 5));
        current_statement__ = 34;
        for (int i = 1; i <= n; ++i) {
          current_statement__ = 32;
          for (int j = (i + 1); j <= n; ++j) {
            local_scalar_t__ log_mu_ij_0 = DUMMY_VAR__;
            current_statement__ = 20;
            log_mu_ij_0 = stan::math::poisson_lpmf<false>(
                            stan::model::rvalue(X, "X",
                              stan::model::index_uni(i),
                                stan::model::index_uni(j)),
                            stan::model::rvalue(rates, "rates",
                              stan::model::index_uni(1)));
            local_scalar_t__ log_mu_ij_1 = DUMMY_VAR__;
            current_statement__ = 21;
            log_mu_ij_1 = stan::math::poisson_lpmf<false>(
                            stan::model::rvalue(X, "X",
                              stan::model::index_uni(i),
                                stan::model::index_uni(j)),
                            stan::model::rvalue(rates, "rates",
                              stan::model::index_uni(2)));
            local_scalar_t__ log_nu_ij_0 = DUMMY_VAR__;
            current_statement__ = 22;
            log_nu_ij_0 = stan::math::bernoulli_lpmf<false>(0, rho);
            local_scalar_t__ log_nu_ij_1 = DUMMY_VAR__;
            current_statement__ = 23;
            log_nu_ij_1 = stan::math::bernoulli_lpmf<false>(1, rho);
            local_scalar_t__ z_ij_0 = DUMMY_VAR__;
            current_statement__ = 24;
            z_ij_0 = (log_mu_ij_0 + log_nu_ij_0);
            local_scalar_t__ z_ij_1 = DUMMY_VAR__;
            current_statement__ = 25;
            z_ij_1 = (log_mu_ij_1 + log_nu_ij_1);
            current_statement__ = 30;
            if (stan::math::logical_gt(z_ij_0, z_ij_1)) {
              current_statement__ = 28;
              lp_accum__.add(
                (z_ij_0 + stan::math::log1p_exp((z_ij_1 - z_ij_0))));
            } else {
              current_statement__ = 26;
              lp_accum__.add(
                (z_ij_1 + stan::math::log1p_exp((z_ij_0 - z_ij_1))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "undir_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> rates =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      rates = in__.template read_constrain_positive_ordered<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(lp__, 2);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      out__.write(rates);
      out__.write(rho);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<std::vector<double>> Q =
         std::vector<std::vector<double>>(n, 
           std::vector<double>(n, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 16;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 4;
        stan::model::assign(Q, 0,
          "assigning variable Q", stan::model::index_uni(i),
                                    stan::model::index_uni(i));
        current_statement__ = 14;
        for (int j = (i + 1); j <= n; ++j) {
          double log_mu_ij_0 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 5;
          log_mu_ij_0 = stan::math::poisson_lpmf<false>(
                          stan::model::rvalue(X, "X",
                            stan::model::index_uni(i),
                              stan::model::index_uni(j)),
                          stan::model::rvalue(rates, "rates",
                            stan::model::index_uni(1)));
          double log_mu_ij_1 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 6;
          log_mu_ij_1 = stan::math::poisson_lpmf<false>(
                          stan::model::rvalue(X, "X",
                            stan::model::index_uni(i),
                              stan::model::index_uni(j)),
                          stan::model::rvalue(rates, "rates",
                            stan::model::index_uni(2)));
          double log_nu_ij_0 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 7;
          log_nu_ij_0 = stan::math::bernoulli_lpmf<false>(0, rho);
          double log_nu_ij_1 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 8;
          log_nu_ij_1 = stan::math::bernoulli_lpmf<false>(1, rho);
          double z_ij_0 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 9;
          z_ij_0 = (log_mu_ij_0 + log_nu_ij_0);
          double z_ij_1 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 10;
          z_ij_1 = (log_mu_ij_1 + log_nu_ij_1);
          current_statement__ = 11;
          stan::model::assign(Q,
            (1 / (1 + stan::math::exp((z_ij_0 - z_ij_1)))),
            "assigning variable Q", stan::model::index_uni(i),
                                      stan::model::index_uni(j));
          current_statement__ = 12;
          stan::model::assign(Q,
            stan::model::rvalue(Q, "Q",
              stan::model::index_uni(i), stan::model::index_uni(j)),
            "assigning variable Q", stan::model::index_uni(j),
                                      stan::model::index_uni(i));
        }
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
          out__.write(Q[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> rates =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(rates, in__.read<local_scalar_t__>(),
          "assigning variable rates", stan::model::index_uni(sym1__));
      }
      out__.write_free_positive_ordered(rates);
      local_scalar_t__ rho = DUMMY_VAR__;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, rho);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"rates", "rho", "Q"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rates" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rates" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "rho");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Q" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rates\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"rates\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Q\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (2 + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (n * n);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (2 + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (n * n);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"rates", "rho"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{2, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = undir_model_namespace::undir_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return undir_model_namespace::profiles__;
}

#endif


